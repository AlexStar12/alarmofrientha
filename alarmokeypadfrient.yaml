blueprint:
  name: Alarmo Keypad with Custom PIN Check
  description: Combine Alarmo keypad sync + manual PIN validation.
  domain: automation

  input:
    state_topic:
      name: MQTT State Topic of your Keypad
      selector:
        text:
    set_topic:
      name: MQTT Set Topic of your Keypad
      selector:
        text:
    entity:
      name: Alarmo panel
      selector:
        entity:
          domain: alarm_control_panel
          integration: alarmo
    allowed_pins:
      name: PINs autorisÃ©s
      selector:
        text:
          multiple: true

variables:
  pins: !input allowed_pins

trigger:
  - platform: state
    entity_id: !input entity
    to:
      - disarmed
      - armed_home
      - armed_away
      - arming
      - pending
      - triggered
  - platform: mqtt
    topic: !input state_topic
    id: keypad_command
  - platform: event
    event_type: alarmo_failed_to_arm
    id: arm_failed
  - platform: event
    event_type: alarmo_command_success
    id: arm_success

action:
  - choose:
      - conditions:
          - condition: trigger
            id: keypad_command
        sequence:
          - variables:
              code: "{{ trigger.payload_json.action_code | default('') }}"
              action: "{{ trigger.payload_json.action | default('') }}"
              tx: "{{ trigger.payload_json.action_transaction | default('null') }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ code in pins }}"
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ action == 'disarm' }}"
                        sequence:
                          - service: alarmo.disarm
                            data:
                              entity_id: !input entity
                              code: "{{ code }}"
                              context_id: "{{ tx }}"
                      - conditions:
                          - condition: template
                            value_template: "{{ action == 'arm_day_zones' }}"
                        sequence:
                          - service: alarmo.arm
                            data:
                              entity_id: !input entity
                              mode: home
                              code: "{{ code }}"
                              context_id: "{{ tx }}"
                      - conditions:
                          - condition: template
                            value_template: "{{ action == 'arm_all_zones' }}"
                        sequence:
                          - service: alarmo.arm
                            data:
                              entity_id: !input entity
                              mode: away
                              code: "{{ code }}"
                              context_id: "{{ tx }}"
              - conditions:
                  - condition: template
                    value_template: "{{ code not in pins }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: !input set_topic
                      payload: >
                        {
                          "arm_mode": {
                            "transaction": "{{ tx }}",
                            "mode": "invalid_code"
                          }
                        }
      - conditions:
          - condition: trigger
            id: arm_success
        sequence:
          - variables:
              tx: "{{ trigger.event.data.context_id }}"
              mode: "{{ trigger.event.data.mode }}"
              action: "{{ trigger.event.data.action }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ tx is not none and action == 'arm' and mode == 'away' }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: !input set_topic
                      payload: |-
                        {
                          "arm_mode": {
                            "transaction": "{{ tx }}",
                            "mode": "arm_all_zones"
                          }
                        }
              - conditions:
                  - condition: template
                    value_template: "{{ tx is not none and action == 'arm' and mode == 'home' }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: !input set_topic
                      payload: >
                        {
                          "arm_mode": {
                            "transaction": "{{ tx }}",
                            "mode": "arm_day_zones"
                          }
                        }
              - conditions:
                  - condition: template
                    value_template: "{{ tx is not none and action == 'disarm' }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: !input set_topic
                      payload: >
                        {
                          "arm_mode": {
                            "transaction": "{{ tx }}",
                            "mode": "disarm"
                          }
                        }
      - conditions:
          - condition: trigger
            id: arm_failed
        sequence:
          - variables:
              tx: "{{ trigger.event.data.context_id }}"
              reason: "{{ trigger.event.data.reason }}"
              cmd: "{{ trigger.event.data.command }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ reason == 'invalid_code' }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: !input set_topic
                      payload: >
                        {
                          "arm_mode": {
                            "transaction": "{{ tx }}",
                            "mode": "invalid_code"
                          }
                        }
              - conditions:
                  - condition: template
                    value_template: "{{ reason == 'open_sensors' }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: !input set_topic
                      payload: >
                        {
                          "arm_mode": {
                            "transaction": "{{ tx }}",
                            "mode": "not_ready"
                          }
                        }
              - conditions:
                  - condition: template
                    value_template: "{{ reason == 'not_allowed' and cmd == 'disarm' }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: !input set_topic
                      payload: >
                        {
                          "arm_mode": {
                            "transaction": "{{ tx }}",
                            "mode": "already_disarmed"
                          }
                        }
      - conditions:
          - condition: template
            value_template: "{{ trigger.platform == 'state' }}"
        sequence:
          - service: mqtt.publish
            data:
              topic: !input set_topic
              payload: >
                {% set s = trigger.to_state.state %}
                {
                  "arm_mode": {
                    "mode":
                    {% if s == 'armed_away' %}"arm_all_zones"
                    {% elif s == 'armed_home' %}"arm_day_zones"
                    {% elif s == 'arming' %}"exit_delay"
                    {% elif s == 'pending' %}"entry_delay"
                    {% elif s == 'disarmed' %}"disarm"
                    {% elif s == 'triggered' %}"in_alarm"
                    {% else %}"disarm"
                    {% endif %}
                  }
                }

mode: parallel
max: 10
