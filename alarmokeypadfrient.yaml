blueprint:
  name: Clavier Zigbee2MQTT - Intégration complète Alarmo
  description: Combine la synchronisation état + commandes clavier + gestion des codes dynamiques avec Alarmo
  domain: automation

  input:
    mqtt_topic_etat_clavier:
      name: Topic MQTT d'état du clavier Zigbee2MQTT
      selector:
        text:
    mqtt_topic_commande_clavier:
      name: Topic MQTT de commande du clavier Zigbee2MQTT
      selector:
        text:
    panneau_alarme:
      name: Entité Alarmo
      selector:
        entity:
          domain: alarm_control_panel
          integration: alarmo

trigger:
  - platform: state
    entity_id: !input panneau_alarme
    id: changement_etat_alarme
  - platform: mqtt
    topic: !input mqtt_topic_etat_clavier
    id: commande_clavier
  - platform: event
    event_type: alarmo_failed_to_arm
    id: event_arm_failure
  - platform: event
    event_type: alarmo_command_success
    id: event_command_success

action:
  - choose:

      # ⬅️ Alarme → Clavier (synchronisation d’état)
      - conditions:
          - condition: trigger
            id: changement_etat_alarme
        sequence:
          - service: mqtt.publish
            data:
              topic: !input mqtt_topic_commande_clavier
              payload: >
                {% set etat = trigger.to_state.state %}
                {% if etat == 'armed_away' %}
                {"arm_mode":{"mode":"arm_all_zones"}}
                {% elif etat == 'armed_home' %}
                {"arm_mode":{"mode":"arm_day_zones"}}
                {% elif etat == 'armed_night' %}
                {"arm_mode":{"mode":"arm_night_zones"}}
                {% elif etat == 'disarmed' %}
                {"arm_mode":{"mode":"disarm"}}
                {% elif etat == 'pending' %}
                {"arm_mode":{"mode":"entry_delay"}}
                {% elif etat == 'arming' %}
                  {% if trigger.to_state.attributes.next_state == 'armed_home' %}
                  {"arm_mode":{"mode":"arm_day_zones"}}
                  {% elif trigger.to_state.attributes.next_state == 'armed_away' %}
                  {"arm_mode":{"mode":"exit_delay"}}
                  {% endif %}
                {% endif %}

      # ⬅️ Clavier → Alarme (commande avec code)
      - conditions:
          - condition: trigger
            id: commande_clavier
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: '{{ trigger.payload_json.action == "disarm" }}'
                sequence:
                  - service: alarmo.disarm
                    data:
                      entity_id: !input panneau_alarme
                      code: "{{ trigger.payload_json.action_code }}"
                      context_id: "{{ trigger.payload_json.action_transaction }}"
              - conditions:
                  - condition: template
                    value_template: '{{ trigger.payload_json.action == "arm_all_zones" }}'
                sequence:
                  - service: alarmo.arm
                    data:
                      entity_id: !input panneau_alarme
                      mode: away
                      code: "{{ trigger.payload_json.action_code }}"
                      context_id: "{{ trigger.payload_json.action_transaction }}"
              - conditions:
                  - condition: template
                    value_template: '{{ trigger.payload_json.action == "arm_day_zones" }}'
                sequence:
                  - service: alarmo.arm
                    data:
                      entity_id: !input panneau_alarme
                      mode: home
                      code: "{{ trigger.payload_json.action_code }}"
                      context_id: "{{ trigger.payload_json.action_transaction }}"

      # ❌ Échec d’armement → message MQTT
      - conditions:
          - condition: trigger
            id: event_arm_failure
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.reason == 'invalid_code' }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: !input mqtt_topic_commande_clavier
                      payload: >
                        {"arm_mode":{"transaction":"{{ trigger.event.data.context_id }}","mode":"invalid_code"}}
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.reason == 'open_sensors' }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: !input mqtt_topic_commande_clavier
                      payload: >
                        {"arm_mode":{"transaction":"{{ trigger.event.data.context_id }}","mode":"not_ready"}}
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.reason == 'not_allowed' and trigger.event.data.command|lower == 'disarm' }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: !input mqtt_topic_commande_clavier
                      payload: >
                        {"arm_mode":{"transaction":"{{ trigger.event.data.context_id }}","mode":"already_disarmed"}}

      # ✅ Réussite → envoyer retour au clavier
      - conditions:
          - condition: trigger
            id: event_command_success
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.action == 'arm' and trigger.event.data.context_id != null and trigger.event.data.mode == 'away' }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: !input mqtt_topic_commande_clavier
                      payload: >
                        {"arm_mode":{"transaction":"{{ trigger.event.data.context_id }}","mode":"arm_all_zones"}}
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.action == 'arm' and trigger.event.data.context_id != null and trigger.event.data.mode == 'home' }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: !input mqtt_topic_commande_clavier
                      payload: >
                        {"arm_mode":{"transaction":"{{ trigger.event.data.context_id }}","mode":"arm_day_zones"}}
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.action == 'disarm' and trigger.event.data.context_id != null }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: !input mqtt_topic_commande_clavier
                      payload: >
                        {"arm_mode":{"transaction":"{{ trigger.event.data.context_id }}","mode":"disarm"}}

mode: parallel
max: 10
