blueprint:
  name: Clavier Zigbee2MQTT + Alarmo (LED & bips + codes Alarmo)
  description: Gère le clavier Zigbee avec Alarmo (retour sonore, LED, et vérif code via Alarmo uniquement).
  domain: automation
  input:
    mqtt_topic_etat_clavier:
      name: Topic MQTT État clavier (Z2M)
    mqtt_topic_commande_clavier:
      name: Topic MQTT Commande clavier (Z2M)
    panneau_alarme:
      name: Entité Alarmo
      selector:
        entity:
          domain: alarm_control_panel

trigger:
  - platform: mqtt
    topic: !input mqtt_topic_etat_clavier
    id: commande_clavier

  - platform: state
    entity_id: !input panneau_alarme
    id: changement_etat_alarm

action:
  - choose:

      # 👉 Quand on tape un code sur le clavier
      - conditions:
          - condition: trigger
            id: commande_clavier
        sequence:
          - variables:
              action: "{{ trigger.payload_json.action }}"
              code: "{{ trigger.payload_json.action_code }}"
              tx: "{{ trigger.payload_json.action_transaction | default('null') }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ action == 'arm_all_zones' }}"
                sequence:
                  - service: alarm_control_panel.alarm_arm_away
                    target:
                      entity_id: !input panneau_alarme
                    data:
                      code: "{{ code }}"
                  - delay: 1
              - conditions:
                  - condition: template
                    value_template: "{{ action == 'arm_day_zones' }}"
                sequence:
                  - service: alarm_control_panel.alarm_arm_home
                    target:
                      entity_id: !input panneau_alarme
                    data:
                      code: "{{ code }}"
                  - delay: 1
              - conditions:
                  - condition: template
                    value_template: "{{ action == 'disarm' }}"
                sequence:
                  - service: alarm_control_panel.alarm_disarm
                    target:
                      entity_id: !input panneau_alarme
                    data:
                      code: "{{ code }}"
                  - delay: 1
          # 📤 Feedback visuel/sonore : code incorrect → rouge + bip
          - condition: template
            value_template: "{{ not is_state_attr(panneau_alarme, 'code_format', none) and not is_state(panneau_alarme, 'arming') and not is_state(panneau_alarme, 'armed_away') }}"
          - service: mqtt.publish
            data:
              topic: !input mqtt_topic_commande_clavier
              payload: >
                {
                  "arm_mode": {
                    "transaction": "{{ tx }}",
                    "mode": "invalid_code"
                  }
                }

      # 🔁 Retour d'état depuis Alarmo vers clavier
      - conditions:
          - condition: trigger
            id: changement_etat_alarm
        sequence:
          - variables:
              etat: "{{ trigger.to_state.state }}"
          - service: mqtt.publish
            data:
              topic: !input mqtt_topic_commande_clavier
              payload: >
                {
                  "arm_mode": {
                    "mode":
                    {% if etat == 'armed_away' %}"arm_all_zones"
                    {% elif etat == 'armed_home' %}"arm_day_zones"
                    {% elif etat == 'arming' %}"exit_delay"
                    {% elif etat == 'pending' %}"entry_delay"
                    {% elif etat == 'triggered' %}"in_alarm"
                    {% elif etat == 'disarmed' %}"disarm"
                    {% else %}"disarm"
                    {% endif %}
                  }
                }

mode: restart
