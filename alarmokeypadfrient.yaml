blueprint:
  name: Alarmo Keypad Sync + Native PIN (Fix Feedback)
  description: "Valide les codes via Alarmo + synchronisation complète du clavier (son + LED)"
  domain: automation

  input:
    state_topic:
      name: MQTT State Topic of your Keypad
      selector:
        text:
    set_topic:
      name: MQTT Set Topic of your Keypad
      selector:
        text:
    entity:
      name: Alarmo panel
      selector:
        entity:
          domain: alarm_control_panel
          integration: alarmo

trigger:
  - platform: mqtt
    topic: !input state_topic
    id: keypad_command

  - platform: event
    event_type: alarmo_command_success
    id: arm_success

  - platform: event
    event_type: alarmo_failed_to_arm
    id: arm_failed

  - platform: state
    entity_id: !input entity
    id: alarm_state_change

variables:
  entity_id: !input entity

action:
  - choose:

      # 1. COMMANDES VIA CLAVIER (code tapé)
      - conditions:
          - condition: trigger
            id: keypad_command
        sequence:
          - variables:
              code: "{{ trigger.payload_json.action_code | default('') }}"
              action: "{{ trigger.payload_json.action | default('') }}"
              tx: "{{ trigger.payload_json.action_transaction | default('null') }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ action == 'disarm' }}"
                sequence:
                  - service: alarmo.disarm
                    data:
                      entity_id: !input entity
                      code: "{{ code }}"
                      context_id: "{{ tx }}"
              - conditions:
                  - condition: template
                    value_template: "{{ action == 'arm_all_zones' }}"
                sequence:
                  - service: alarmo.arm
                    data:
                      entity_id: !input entity
                      mode: away
                      code: "{{ code }}"
                      context_id: "{{ tx }}"
              - conditions:
                  - condition: template
                    value_template: "{{ action == 'arm_day_zones' }}"
                sequence:
                  - service: alarmo.arm
                    data:
                      entity_id: !input entity
                      mode: home
                      code: "{{ code }}"
                      context_id: "{{ tx }}"

      # 2. ALARME VALIDÉE PAR ALARMO → Feedback vers clavier
      - conditions:
          - condition: trigger
            id: arm_success
        sequence:
          - variables:
              tx: "{{ trigger.event.data.context_id }}"
              mode: "{{ trigger.event.data.mode }}"
              action: "{{ trigger.event.data.action }}"
          - service: mqtt.publish
            data:
              topic: !input set_topic
              payload: >
                {
                  "arm_mode": {
                    "transaction": "{{ tx }}",
                    "mode": "{% if action == 'arm' and mode == 'away' %}arm_all_zones
                             {% elif action == 'arm' and mode == 'home' %}arm_day_zones
                             {% elif action == 'disarm' %}disarm
                             {% else %}disarm{% endif %}"
                  }
                }

      # 3. CODE FAUX OU AUTRE ERREUR → Feedback
      - conditions:
          - condition: trigger
            id: arm_failed
        sequence:
          - variables:
              tx: "{{ trigger.event.data.context_id }}"
              reason: "{{ trigger.event.data.reason }}"
              cmd: "{{ trigger.event.data.command }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ reason == 'invalid_code' }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: !input set_topic
                      payload: >
                        {
                          "arm_mode": {
                            "transaction": "{{ tx }}",
                            "mode": "invalid_code"
                          }
                        }

      # 4. SYNC AUTOMATIQUE SUR ÉTAT DE L’ALARME
      - conditions:
          - condition: trigger
            id: alarm_state_change
        sequence:
          - variables:
              s: "{{ trigger.to_state.state }}"
          - service: mqtt.publish
            data:
              topic: !input set_topic
              payload: >
                {
                  "arm_mode": {
                    "mode": "{% if s == 'armed_away' %}arm_all_zones
                             {% elif s == 'armed_home' %}arm_day_zones
                             {% elif s == 'arming' %}exit_delay
                             {% elif s == 'pending' %}entry_delay
                             {% elif s == 'triggered' %}in_alarm
                             {% else %}disarm{% endif %}"
                  }
                }

mode: parallel
max: 10
